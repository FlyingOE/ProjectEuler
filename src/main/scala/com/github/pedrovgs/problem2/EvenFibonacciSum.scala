package com.github.pedrovgs.problem2

import com.github.pedrovgs.time.Time

import scala.annotation.tailrec
import scala.collection.mutable.ListBuffer

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 *
 * @author Pedro Vicente Gómez Sánchez.
 */
object EvenFibonacciSum {

  def main(args: Array[String]) = {
    Time.measure(println("Sum of even numbers in Fibonacci sequence with values less than 4000000 is equals to: " + sumFibonacciEvenNumbersRecursive(4000000)))
    Time.measure(println("Sum of even numbers in Fibonacci sequence with values less than 4000000 is equals to: " + sumFibonacciEvenNumbersRecursiveLinearPerformance(4000000)))
  }

  /**
   * Calculate the sum of Fibonacci even numbers.
   *
   * This implementation is based on a tail recursive function to calculate Fibonacci numbers and other iterative
   * version to filter even elements and sum it.
   *
   * @param bound used to calculate Fibonacci numbers.
   * @return the sum of Fibonacci even numbers below the bound param.
   */
  def sumFibonacciEvenNumbersRecursive(bound: Int): Int = {

    @tailrec
    def getFibonacciElements(i: Int, elems: ListBuffer[Int]): ListBuffer[Int] = {
      if (i == 0 || i == 1) getFibonacciElements(i + 1, elems.+=(i))
      else if (elems.last >= bound) elems
      else getFibonacciElements(i + 1, elems.+=(elems(i - 1) + elems(i - 2)))
    }

    getFibonacciElements(0, ListBuffer()).filter(_ % 2 == 0).sum
  }

  /**
   * Calculate the sum of Fibonacci even numbers.
   *
   * This implementation is based on a tail recursive function. At the same time the algorithm calculate the next
   * Fibonacci element is going to evaluate if is even and sum it.
   *
   * This algorithm implementation is tail recursive.
   *
   * @param bound used to calculate Fibonacci numbers.
   * @return the sum of Fibonacci even numbers below the bound param.
   */
  def sumFibonacciEvenNumbersRecursiveLinearPerformance(bound: Int): Int = {

    @tailrec
    def getFibonacciElements(acc: Int, i: Int, elems: ListBuffer[Int]): Int = {
      if (i == 0 || i == 1) getFibonacciElements(acc, i + 1, elems.+=(i))
      else if (elems.last >= bound) acc
      else {
        val nextFibonacciElement: Int = elems(i - 1) + elems(i - 2)
        if (nextFibonacciElement % 2 == 0) getFibonacciElements(acc + nextFibonacciElement, i + 1, elems.+=(nextFibonacciElement))
        else getFibonacciElements(acc, i + 1, elems.+=(nextFibonacciElement))
      }
    }

    getFibonacciElements(0, 0, ListBuffer())
  }

}
